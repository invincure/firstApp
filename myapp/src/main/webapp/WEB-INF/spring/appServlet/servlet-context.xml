<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- Swagger 설정 START -->
	<resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
	<resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />
	<!-- Swagger 설정 START -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="co.kr.myapp" />
	<aop:aspectj-autoproxy/>
	
	<!-- property 설정방식 2가지. -->
	<!-- Case1. @Value("${datasource.url}") 형태로 이용가능.
	     동일한 이름의 property가 있는경우,
	        JVM 시스템프로퍼티 > 환경변수 > 프로피티파일 순으로 적용됨.
	     하여, 기본값을 프로퍼티 파일에 설정한 후, 특별한 이유가 없다면 그대로 사용하다가, 특정환경에 맞춰 프로퍼티를 변경하는 상황에서 JVM의 시스템프로퍼티 이용.      
	 -->
	<context:property-placeholder location="classpath:properties/application.properties"/>
	<!-- Case2.	@Value("#{myappConfig['datasource.url']}") 형태로 이용 
	 -->
	<util:properties id="myappConfig" location="classpath:properties/application.properties">
	</util:properties>
	
	<!-- MessageBundle 설정. bean ID는 반드시 messageSource로 해야함 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames"> 
			<beans:list> 
				<!-- 메세지 파일의 위치를 지정합니다. message_언어.properties 파일을 찾습니다. --> 
				<beans:value>/WEB-INF/message/message</beans:value> 
			</beans:list>
		 </beans:property> <!-- 파일의 기본 인코딩을 지정합니다. --> 
		 <beans:property name="defaultEncoding" value="UTF-8" /> 
		 <!-- properties 파일이 변경되었는지 확인하는 주기를 지정합니다. 60초 간격으로 지정했습니다. --> 
		 <beans:property name="cacheSeconds" value="1" /> 
	</beans:bean> 
	
</beans:beans>
